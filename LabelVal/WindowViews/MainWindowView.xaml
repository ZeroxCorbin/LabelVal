<mah:MetroWindow x:Class="LabelVal.WindowViews.MainWindowView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:IconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
        xmlns:local="clr-namespace:LabelVal.WindowViews"
            xmlns:ViewModels="clr-namespace:LabelVal.WindowViewModels"     
        xmlns:Dialog="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
        Dialog:DialogParticipation.Register="{Binding}"
        d:DataContext="{d:DesignInstance Type=ViewModels:MainWindowViewModel}"
        mc:Ignorable="d"
        Height="592" Width="1119" SaveWindowPosition="True" Closing="MetroWindow_Closing">

    <mah:MetroWindow.Title>
        <MultiBinding StringFormat="Label Validator : {0}">
            <Binding Path="Version"/>
        </MultiBinding>
    </mah:MetroWindow.Title>

    <mah:MetroWindow.DataContext>
        <ViewModels:MainWindowViewModel/>
    </mah:MetroWindow.DataContext>

    <mah:MetroWindow.RightWindowCommands>
        <mah:WindowCommands>>

            <Button BorderThickness="0" 
                        x:Name="btnColorBlind"
                        Click="btnColorBlind_Click">
                <IconPacks:PackIconModern Width="20" Height="20" Kind="Eye"/>
            </Button>

            <Button BorderThickness="0" 
                        x:Name="btnLightTheme"
                        Click="btnLightTheme_Click">
                <IconPacks:PackIconModern Width="20" Height="20" Kind="WeatherSun"/>
            </Button>

            <Button BorderThickness="0" 
                        x:Name="btnDarkTheme"
                        Click="btnDarkTheme_Click">
                <IconPacks:PackIconModern Width="20" Height="20" Kind="MoonWaningCrescent"/>
            </Button>
        </mah:WindowCommands>
    </mah:MetroWindow.RightWindowCommands>

    <mah:MetroWindow.LeftWindowCommands>
        <mah:WindowCommands>
            <Button Name="btnShowSettings" Click="btnShowSettings_Click">
                <IconPacks:PackIconModern Width="20" Height="20" Kind="Cog"/>
            </Button>
        </mah:WindowCommands>
    </mah:MetroWindow.LeftWindowCommands>

    <mah:MetroWindow.Flyouts>
        <mah:FlyoutsControl>
            <mah:Flyout x:Name="ApplicationSettings" Header="Application Settings" Position="Left">
                <local:AppSettingsControlView/>
            </mah:Flyout>
        </mah:FlyoutsControl>
    </mah:MetroWindow.Flyouts>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <!--V275 Node connection-->
            <Border Grid.Row="0" Grid.Column="0" BorderBrush="{DynamicResource MahApps.Brushes.Accent}" BorderThickness="2" Margin="5">
                <StackPanel Orientation="Horizontal"  Margin="3">

                    <Label Content="Node Connection"/>

                    <Button Content="Get Nodes"
                    Command="{Binding GetDevices}"
                    IsEnabled="{Binding IsNotLoggedIn}"/>

                    <Label/>

                    <ComboBox ItemsSource="{Binding Nodes}" Margin="0,0,2,0"
                          SelectedValue="{Binding SelectedNode}"
                          IsEnabled="{Binding IsNotLoggedIn}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding Path=enumeration, Mode=OneTime, StringFormat='Slot: {0} Model: '}"/>
                                    <TextBlock Text="{Binding Path=printerModel, Mode=OneTime}" />
                                    <TextBlock Text="{Binding Path=cameraMAC, Mode=OneTime, StringFormat=' ({0})'}" />
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                    <!--<TextBox mah:TextBoxHelper.Watermark="Board Stack IP" 
                         Text="{Binding Host}" MinWidth="80"/>-->
                    <!--<TextBox mah:TextBoxHelper.Watermark="Path" 
                         Text="{Binding RootPath}" MinWidth="80"/>-->
                    <!--<TextBox mah:TextBoxHelper.Watermark="User Name" 
                         Text="{Binding UserName}" MinWidth="80" Margin="0,0,2,0"
                     IsEnabled="{Binding IsNotLoggedIn}"/>
                    <TextBox mah:TextBoxHelper.Watermark="Password" 
                         Text="{Binding Password}" MinWidth="80"
                     IsEnabled="{Binding IsNotLoggedIn}"/>-->
                    <Label/>
                    <StackPanel Orientation="Horizontal" IsEnabled="{Binding IsGetDevices}" >
                        <Button Content="Logout" Margin="0,0,2,0"
                            Command="{Binding Logout}"
                            IsEnabled="{Binding IsLoggedIn}"/>

                        <Button Content="Monitor" Margin="0,0,2,0"
                            Command="{Binding LoginMonitor}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                    <Setter Property="IsEnabled" Value="True"/>
                                    <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Control}"/>
                                    <Style.Triggers>
                                        <DataTrigger Value="True" Binding="{Binding IsLoggedIn}">
                                            <Setter Property="IsHitTestVisible" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="False" Binding="{Binding IsDeviceSelected}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="True" Binding="{Binding IsLoggedIn_Control}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="True" Binding="{Binding IsLoggedIn_Monitor}">
                                            <Setter Property="Background" Value="{DynamicResource CB_Green}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <Button Content="Control"
                            Command="{Binding LoginControl}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                    <Setter Property="IsEnabled" Value="True"/>
                                    <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Control}"/>
                                    <Style.Triggers>
                                        <DataTrigger Value="True" Binding="{Binding IsLoggedIn}">
                                            <Setter Property="IsHitTestVisible" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="False" Binding="{Binding IsDeviceSelected}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="True" Binding="{Binding IsLoggedIn_Monitor}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="True" Binding="{Binding IsLoggedIn_Control}">
                                            <Setter Property="Background" Value="{DynamicResource CB_Green}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>


                    </StackPanel>

                </StackPanel>
            </Border>

            <!--V275 State Data-->
            <Border Grid.Column="1" BorderBrush="{DynamicResource MahApps.Brushes.Accent}" BorderThickness="2" Margin="5">
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Visibility" Value="Visible"/>
                        <Style.Triggers>
                            <DataTrigger Value="False" Binding="{Binding IsLoggedIn}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>

                <StackPanel Orientation="Horizontal"  Margin="3">

                    <Label Content="Template:"/>

                    <Label>
                        <Label.Style>
                            <Style TargetType="{x:Type Label}">
                                <Setter Property="Background" Value="{DynamicResource ColorBlindBrush5}"/>
                                <Setter Property="Content" Value="{Binding V275.V275_JobName}"/>
                                <Style.Triggers>
                                    <DataTrigger Value="False" Binding="{Binding IsWrongTemplateName}">
                                        <Setter Property="Background" Value="{DynamicResource CB_Green}"/>
                                    </DataTrigger>
                                    <DataTrigger Value="" Binding="{Binding V275.V275_JobName}">
                                        <Setter Property="Content" Value="-----"/>
                                        <Setter Property="Background" Value="{DynamicResource ColorBlindBrush5}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Label.Style>
                    </Label>

                    <Label Content="State:"/>

                    <Label Content="{Binding V275.V275_State}">
                        <Label.Style>
                            <Style TargetType="{x:Type Label}">
                                <Setter Property="Background" Value="{DynamicResource ColorBlindBrush5}"/>
                                <Setter Property="Visibility" Value="Visible"/>
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Value="Editing" Binding="{Binding V275.V275_State}" />
                                            <Condition Value="True" Binding="{Binding SelectedStandard.IsGS1}" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource CB_Green}" />
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Value="Running" Binding="{Binding V275.V275_State}" />
                                            <Condition Value="False" Binding="{Binding SelectedStandard.IsGS1}" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource CB_Green}" />
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Label.Style>
                    </Label>
                    <Label/>
                    <Button Content="Run" Margin="0,0,2,0"
                            Command="{Binding V275_SwitchRun}">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                <Setter Property="IsEnabled" Value="False"/>
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Value="True" Binding="{Binding IsLoggedIn_Control}">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                    <DataTrigger Value="Editing" Binding="{Binding V275.V275_State}">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                    <DataTrigger Value="True" Binding="{Binding SelectedStandard.IsGS1}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Content="Edit" Margin="0,0,2,0"
                            Command="{Binding V275_SwitchEdit}">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                <Setter Property="IsEnabled" Value="False"/>
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Value="True" Binding="{Binding IsLoggedIn_Control}">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                    <DataTrigger Value="Running" Binding="{Binding V275.V275_State}">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                    <DataTrigger Value="Paused" Binding="{Binding V275.V275_State}">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>

                    <Button Content="Remove"
                            Command="{Binding V275_RemoveRepeat}">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                <Setter Property="IsEnabled" Value="False"/>
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Value="True" Binding="{Binding IsLoggedIn_Control}"/>
                                            <Condition Value="Paused" Binding="{Binding V275.V275_State}"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </StackPanel>
            </Border>

            <Grid Grid.Row="1" Grid.ColumnSpan="3">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>

                <Border Grid.Column="0" BorderBrush="{DynamicResource MahApps.Brushes.Accent}" BorderThickness="2" Margin="5">
                    <StackPanel Orientation="Horizontal" Margin="3">
                        <Label Content="Printer"/>
                        <ComboBox ItemsSource="{Binding Printers}" SelectedItem="{Binding SelectedPrinter}" IsEnabled="{Binding IsNotRunRunning}"/>
                    </StackPanel>
                </Border>

                <!--Standards Database-->
                <Border Grid.Column="1" BorderThickness="2" Margin="5" BorderBrush="{DynamicResource MahApps.Brushes.Accent}">
                    <StackPanel Orientation="Horizontal" Margin="3">
                        <Label Content="Standards"/>

                        <Button Command="{Binding CreateStandardsDatabase}"
                                ToolTip="Create a new standards database."
                                Margin="0,0,2,0">
                            <IconPacks:Material Kind="Plus"/>
                        </Button>

                        <Button Command="{Binding LockStandardsDatabase}" Margin="0,0,2,0">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                    <Setter Property="Content">
                                        <Setter.Value>
                                            <IconPacks:Material Kind="LockOpenVariant"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="IsHitTestVisible" Value="True"/>
                                    <Setter Property="ToolTip" Value="Database is unlocked. Click to unlock."/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsDatabaseLocked}" Value="True">
                                            <Setter Property="Content">
                                                <Setter.Value>
                                                    <IconPacks:Material Kind="Lock"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="ToolTip" Value="Database is locked. Click to unlock."/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsDatabasePermLocked}" Value="True">
                                            <Setter Property="Content">
                                                <Setter.Value>
                                                    <IconPacks:Material Kind="DatabaseLock"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="ToolTip" Value="Database is premanently locked."/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <ComboBox ItemsSource="{Binding StandardsDatabases}" 
                                  SelectedItem="{Binding SelectedStandardsDatabase}"
                                  IsEnabled="{Binding IsNotRunRunning}"/>



                        <Label/>

                        <ComboBox ItemsSource="{Binding Standards}"
                                  SelectedItem="{Binding SelectedStandard}"
                                  IsEnabled="{Binding IsNotRunRunning}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Name}">
                                            <!--<TextBlock.Text>
                                                <MultiBinding StringFormat="{}{0}   ({1})">
                                                    <Binding Path="Name"/>
                                                    <Binding Path="NumRows"/>
                                                </MultiBinding>
                                            </TextBlock.Text>-->
                                    </TextBlock>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                    </StackPanel>
                </Border>

                <!--Test Runs-->
                <Border Grid.Column="2" BorderBrush="{DynamicResource MahApps.Brushes.Accent}" BorderThickness="2" Margin="5">
                    <StackPanel Orientation="Horizontal" Margin="3">

                        <Label Content="Run Test"/>

                        <mah:NumericUpDown Value="{Binding RunLoopCount}" Minimum="1" Maximum="100" Interval="1"/>

                        <Label/>

                        <Button Content="Start" Margin="0,0,2,0"
                            Command="{Binding StartRun}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                    <Setter Property="IsEnabled" Value="True"/>
                                    <Style.Triggers>
                                        <DataTrigger Value="False" Binding="{Binding IsLoggedIn_Control}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="True" Binding="{Binding IsRunRunning}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="" Binding="{Binding V275.V275_State}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="Idle" Binding="{Binding V275.V275_State}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <Button Margin="0,0,2,0"
                            Command="{Binding PauseRun}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                    <Setter Property="IsEnabled" Value="True"/>
                                    <Setter Property="Content" Value="Pause"/>
                                    <Style.Triggers>
                                        <DataTrigger Value="False" Binding="{Binding IsLoggedIn_Control}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="False" Binding="{Binding IsRunRunning}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="True" Binding="{Binding IsRunPaused}">
                                            <Setter Property="Content" Value="Resume"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <Button Content="Stop"
                            Command="{Binding StopRun}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                    <Setter Property="IsEnabled" Value="True"/>
                                    <Style.Triggers>
                                        <DataTrigger Value="False" Binding="{Binding IsLoggedIn_Control}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Value="False" Binding="{Binding IsRunRunning}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <mah:ProgressRing IsActive="{Binding IsRunRunning}" Foreground="{DynamicResource MahApps.Brushes.ThemeForeground}" Height="30" Width="30"/>

                        <Button Content="View Test Results" Click="Button_Click"/>
                    </StackPanel>
                </Border>

            </Grid>
        </Grid>

        <ScrollViewer Grid.Row="1"  HorizontalScrollBarVisibility="Auto">
            <ItemsControl ItemsSource="{Binding Labels}">
                <!--<ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel IsItemsHost="True"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>-->
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <local:LabelControlView />
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>

        <StatusBar VerticalAlignment="Bottom" Grid.Row="2">
            <StatusBarItem>
                <TextBlock Text="{Binding UserMessage}"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</mah:MetroWindow>
